installing:
copy config files (use mlocate)
change to user postgres - make data directory
create db cluster: gentoo: initdb -D /var/lib/posgresql/9.4/data
or use pg_ctl: pg_ctl -D /var/lib/posgresql/9.4/data initdb
set permissions, as on gentoo wiki in pg_hba.conf

/etc/init.d/postgresql start

open connection and set password:
psql -U postgres
\password - return service requested
\q
change 'trust' to password for the local connection
electronic service requested today

reload configuration
/etc/init.d/postgresql restart

create user:
createuser -U postgres taylor
psql -U postgres
=> alter role taylor with password 'password';
=> \q
to log into this account
psql -d postgres -U taylor

# createdb startupdex


###psql commands
\du - list users
\dt *.* - list tables


change database connection path at:
sqlalchemy.url = postgresql://taylor:doit@localhost:5432/startupdex

template1=# CREATE USER tom WITH PASSWORD 'myPassword';
template1=# CREATE DATABASE jerry;
template1=# GRANT ALL PRIVILEGES ON DATABASE jerry to tom;

CREATE TABLE user_has_articles (
	userid integer REFERENCES users(id) ON DELETE CASCADE,
	articleid integer REFERENCES articles(id) ON DELETE CASCADE,
	PRIMARY KEY (userid, articleid)
);
CREATE TABLE startup_has_articles (
	startupid integer REFERENCES startups(id) ON DELETE CASCADE,
	articleid integer REFERENCES articles(id) ON DELETE CASCADE,
	PRIMARY KEY (startupid, articleid)
);
CREATE TABLE user_has_startups (
	userid integer REFERENCES users(id) ON DELETE CASCADE,
	startupid integer REFERENCES startups(id) ON DELETE CASCADE,
	PRIMARY KEY (userid, startupid)
);

CREATE TABLE startups (
	id SERIAL NOT NULL,
	userid_creator INTEGER NOT NULL,
	name TEXT NOT NULL,
	status TEXT,
	hidden BOOLEAN,
	country TEXT NOT NULL,
	state_province TEXT NOT NULL,
	city TEXT NOT NULL,
	street_address TEXT,
	tags TEXT ,
	contact_phone TEXT ,
	contact_email TEXT NOT NULL,
	local_url TEXT NOT NULL,
	home_url TEXT ,
	blog_url TEXT ,
	linkedin_url TEXT ,
	facebook_url TEXT ,
	twitter_url TEXT ,
	logo_url TEXT NOT NULL,
	thumb_url TEXT NOT NULL,
	header_info TEXT ,
	short_info TEXT NOT NULL,
	primary_category TEXT NOT NULL,
	categories TEXT NOT NULL,
	about TEXT NOT NULL,
	startupdex_ranking TEXT ,
	angelco_quality INTEGER,
	angelco_follower_count INTEGER ,
	created_at TIMESTAMP NOT NULL,
	updated_at TIMESTAMP NOT NULL,
	angelco_status TEXT ,
	company_size TEXT NOT NULL,
	company_status INTEGER ,
	PRIMARY KEY (id)
);

CREATE TABLE angelcomirror (
	startupdexid INTEGER NOT NULL,
	id INTEGER,
	hidden INTEGER,
	community_profile INTEGER,
	name TEXT,
	angellist_url TEXT,
	logo_url TEXT,
	thumb_url TEXT,
	quality INTEGER,
	product_desc TEXT,
	high_concept TEXT,
	follower_count TEXT,
	company_url TEXT,
	company_size TEXT,
	company_type TEXT,
	created_at TEXT,
	updated_at TEXT,
	twitter_url TEXT,
	facebook_url TEXT,
	linkedin_url TEXT,
	blog_url TEXT,
	crunchbase_url TEXT,
	video_url TEXT,
	markets TEXT,
	status TEXT,
	screenshots TEXT,
	launch_date TEXT,
	fundraising TEXT,
	locations TEXT,
	PRIMARY KEY (startupdexid)
);

CREATE TABLE passwords (
	id SERIAL,
	user_id INTEGER UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	password TEXT NOT NULL,
	salt1 TEXT NOT NULL,
	salt2 TEXT NOT NULL,
	version INTEGER,
	PRIMARY KEY (id)
);

CREATE TABLE users (
	id SERIAL NOT NULL,
	email TEXT NOT NULL,
	password TEXT,
	fullname TEXT NOT NULL,
	phone TEXT,
	confirmed BOOLEAN,
	join_date TIMESTAMP,
	tz TEXT,
	tzoffset TEXT,
	status TEXT,
	location TEXT,
	country TEXT,
	state_province TEXT
	city TEXT,
	street_address TEXT,
	thumb_url TEXT,
	photo_url TEXT,
	local_url TEXT,
	home_url TEXT,
	blog_url TEXT,
	linkedin_url TEXT,
	facebook_url TEXT,
	twitter_url TEXT,
);

CREATE TABLE articles (
	id SERIAL NOT NULL,
	startupdexid INTEGER,
	authorid INTEGER NOT NULL,
	author_name TEXT,
	title TEXT,
	subtitle TEXT,
	lead_text TEXT,
	story TEXT,
	local_url TEXT,
	tags TEXT,
	date_published TIMESTAMP,
	date_edited TIMESTAMP,
	photo_url TEXT,
	header_image TEXT,
	other_images TEXT,
);







useful commands:
(as user taylor)
psql -d startupdex -c "ALTER TABLE startups ALTER company_size TYPE text"
psql -d startupdex -c "TRUNCATE TABLE startups"
psql -d startupdex -c "TRUNCATE TABLE startups restart identity"
psql -d startupdex -c "CREATE INDEX index_startups_on_id ON startups USING btree (id)"
psql -d startupdex -c "CREATE INDEX index_startups_on_state ON startups USING btree (state)"

psql -U postgres -d startupdex -c "GRANT all ON articles TO taylor";
psql -U postgres -d startupdex -c "
TRUNCATE TABLE startups, user_has_startups, angelcomirror, startup_has_categories, categories
RESTART IDENTITY CASCADE
;
"

psql -U postgres -d startupdex -c "SELECT * FROM users WHERE username='donny' ORDER BY id DESC"

psql -U postgres -d startupdex -c "ALTER TABLE users ADD COLUMN fullname text, ADD COLUMN email text"
psql -U postgres -d startupdex -c "ALTER TABLE users DROP COLUMN username, DROP COLUMN name"

psql -U postgres -d startupdex -c "INSERT INTO users (name, username, password, home_url) VALUES ('Zim zam the zim man', 'donny', '1234', 'http://google.com')"
psql -U postgres -d startupdex -c "INSERT INTO users (fullname, email, password, home_url) VALUES ('Zim zam the zim man', 'donny@hotmail.co', '1234', 'http://google.com')"

psql -U taylor -d startupdex -c "CREATE TABLE passwords (id SERIAL NOT NULL, user_id INTEGER, password TEXT NOT NULL, salt1 TEXT NOT NULL, salt2 TEXT NOT NULL, version INTEGER NOT NULL, CONSTRAINT user_id_fk FOREIGN KEY(user_id) REFERENCES users (id) )"
psql -U taylor -d startupdex -c "CREATE UNIQUE INDEX password_user_id ON passwords(user_id)"

+++++ index +++++
CREATE UNIQUE INDEX name ON table (column [, ...]);
psql -U taylor -d startupdex -c "CREATE UNIQUE INDEX local_url_index ON startups local_url"
++++++++++


psql -U postgres -d startupdex -c "ALTER TABLE startups ADD COLUMN created_at timestamp with time zone"
psql -U postgres -d startupdex -c "ALTER TABLE startups ADD COLUMN updated_at timestamp with time zone"
psql -U postgres -d startupdex -c "ALTER TABLE articles ADD COLUMN date_published timestamp with time zone"
psql -U postgres -d startupdex -c "ALTER TABLE articles ADD COLUMN date_edited timestamp with time zone"





+++++ foreign keys +++++
CREATE TABLE element (
    element_id SERIAL NOT NULL,
    parent_node_id INTEGER,
    PRIMARY KEY (element_id)
)
CREATE TABLE node (
    node_id SERIAL NOT NULL,
    primary_element INTEGER,
    PRIMARY KEY (node_id)
)
ALTER TABLE element ADD CONSTRAINT fk_element_parent_node_id
    FOREIGN KEY(parent_node_id) REFERENCES node (node_id)
ALTER TABLE node ADD FOREIGN KEY(primary_element)
    REFERENCES element (element_id)

ALTER TABLE element DROP CONSTRAINT fk_element_parent_node_id
DROP TABLE node
DROP TABLE element
+++++++++++


CREATE TABLE fts_startups (
	id SERIAL,
	startupdex_id INTEGER UNIQUE,
	angelco_id INTEGER UNIQUE,
	name TEXT,
	short_info TEXT,
	photo_url TEXT,
	ranking TEXT,
	doc TEXT,
	tsv TSVECTOR
);

CREATE TRIGGER tsvupdate BEFORE INSERT OR UPDATE ON fts_startups 
FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger (
tsv, 'pg_catalog.english', doc);

CREATE INDEX fts_idx ON fts_startups USING GIN (tsv);

INSERT INTO fts_startups (doc) VALUES ('sketching the trees'), ('Found in schema.org');

WITH q AS ( SELECT to_tsquery('sketch & trees') AS query ),
ranked AS ( SELECT id, doc, ts_ranked_cd(tsv, query) AS rank
FROM fts_startups, query
WHERE q.query @@ tsv ORDER BY rank DESC LIMIT 10
)

SELECT id, ts_headline (doc, q.query)
FROM ranked, q
ORDER BY ranked DESC;

+++++++++++++++++++++++++++++++


	



SQLITE:
#delete and reset
Delete from TableName
DELETE FROM SQLITE_SEQUENCE WHERE name='TableName';

# Create the tables from a python shell
>>> from search_example import Entry, FTSEntry
>>> Entry.create_table()
>>> FTSEntry.create_table()

